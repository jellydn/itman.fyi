---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="theme-toggle">
			<button id="themeToggle" aria-label="Toggle theme">
				<svg class="sun-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
					<circle cx="12" cy="12" r="5"></circle>
					<line x1="12" y1="1" x2="12" y2="3"></line>
					<line x1="12" y1="21" x2="12" y2="23"></line>
					<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
					<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
					<line x1="1" y1="12" x2="3" y2="12"></line>
					<line x1="21" y1="12" x2="23" y2="12"></line>
					<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
					<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
				</svg>
				<svg class="moon-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
					<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
				</svg>
			</button>
		</div>
		<slot />
		<script>
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return 'dark';
			})();

			if (theme === 'light') {
				document.documentElement.classList.remove('dark');
			} else {
				document.documentElement.classList.add('dark');
			}

			window.localStorage.setItem('theme', theme);

			const handleToggleClick = () => {
				const element = document.documentElement;
				element.classList.toggle("dark");

				const isDark = element.classList.contains("dark");
				localStorage.setItem("theme", isDark ? "dark" : "light");
			}

			document.getElementById("themeToggle")?.addEventListener("click", handleToggleClick);
		</script>
	</body>
</html>
<style is:global>
	:root {
		--accent: 59, 130, 246; /* Blue-600 */
		--accent-light: 96, 165, 250; /* Blue-400 */
		--accent-dark: 29, 78, 216; /* Blue-700 */
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		--background: #f8fafc; /* Slate-50 */
		--text: #1e293b; /* Slate-800 */
		--card-bg: #ffffff;
		--card-border: #e2e8f0; /* Slate-200 */
		--dot-color: rgba(30, 41, 59, 0.06); /* Slate-800 with opacity */
	}

	:root.dark {
		--background: #0f172a; /* Slate-900 */
		--text: #f1f5f9; /* Slate-100 */
		--card-bg: #1e293b; /* Slate-800 */
		--card-border: #334155; /* Slate-700 */
		--dot-color: rgba(241, 245, 249, 0.03); /* Slate-100 with opacity */
	}

	html {
		font-family: system-ui, sans-serif;
		background: var(--background);
		background-image: radial-gradient(var(--dot-color) 1px, transparent 1px);
		background-size: 40px 40px;
		color: var(--text);
		transition: background-color 0.3s ease;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	.theme-toggle {
		position: fixed;
		top: 1rem;
		right: 1rem;
		z-index: 999;
	}
	.theme-toggle button {
		border: none;
		background: none;
		cursor: pointer;
		padding: 0.5rem;
		border-radius: 0.5rem;
		color: var(--text);
		background-color: var(--card-bg);
		border: 1px solid var(--card-border);
		transition: all 0.3s ease;
	}
	.theme-toggle button:hover {
		background-color: rgb(var(--accent-light), 0.1);
		transform: translateY(-2px);
	}
	.sun-icon {
		display: none;
	}
	.moon-icon {
		display: block;
	}
	:root.dark .sun-icon {
		display: block;
	}
	:root.dark .moon-icon {
		display: none;
	}
</style>
